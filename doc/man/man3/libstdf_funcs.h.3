.TH "libstdf_funcs.h" 3 "24 Mar 2017" "libstdf" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libstdf_funcs.h \- 
.SH "Detailed Description"
.PP 
Publicly exported functions. 


.SH SYNOPSIS
.br
.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBstdf_init_header\fP(header, type)   INIT_HEADER(header, type)"
.br
.ti -1c
.RI "#define \fBstdf_get_rec_name_from_head\fP(h)   stdf_get_rec_name(h.REC_TYP, h.REC_SUB)"
.br
.ti -1c
.RI "#define \fBstdf_get_rec_name_from_rec\fP(r)   stdf_get_rec_name(r->header.REC_TYP, r->header.REC_SUB)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "stdf_file * \fBstdf_open\fP (char *)"
.br
.ti -1c
.RI "stdf_file * \fBstdf_open_ex\fP (char *, uint32_t,...)"
.br
.ti -1c
.RI "stdf_file * \fBstdf_dopen\fP (int)"
.br
.ti -1c
.RI "stdf_file * \fBstdf_dopen_ex\fP (int, uint32_t,...)"
.br
.ti -1c
.RI "int \fBstdf_close\fP (stdf_file *)"
.br
.ti -1c
.RI "int \fBstdf_set_setting\fP (stdf_file *, uint32_t,...)"
.br
.ti -1c
.RI "void \fBstdf_get_setting\fP (stdf_file *, uint32_t,...)"
.br
.ti -1c
.RI "\fBstdf_rec_unknown\fP * \fBstdf_read_record\fP (stdf_file *)"
.br
.ti -1c
.RI "\fBstdf_rec_unknown\fP * \fBstdf_read_record_raw\fP (stdf_file *)"
.br
.ti -1c
.RI "\fBstdf_rec_unknown\fP * \fBstdf_parse_raw_record\fP (\fBstdf_rec_unknown\fP *)"
.br
.ti -1c
.RI "void \fBstdf_free_record\fP (\fBstdf_rec_unknown\fP *)"
.br
.ti -1c
.RI "ssize_t \fBstdf_write_record\fP (stdf_file *, void *)"
.br
.ti -1c
.RI "ssize_t \fBstdf_write_record_raw\fP (stdf_file *, \fBstdf_rec_unknown\fP *)"
.br
.ti -1c
.RI "char * \fBstdf_get_rec_name\fP (stdf_rec_typ, stdf_rec_sub)"
.br
.ti -1c
.RI "int \fBstdf_rec_to_idx\fP (void *) stdf_attribute_const"
.br
.ti -1c
.RI "int \fBstdf_rec_to_idx_count\fP (void) stdf_attribute_const"
.br
.ti -1c
.RI "int \fBstdf_rec_name_to_idx\fP (char *) stdf_attribute_const"
.br
.ti -1c
.RI "char * \fBstdf_get_Vn_name\fP (int) stdf_attribute_const"
.br
.ti -1c
.RI "void \fBstdf_get_Vn_name_r\fP (int, char *) stdf_attribute_const"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int stdf_close (stdf_file *)"
.PP
Close an open file 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, \fBdump_records_to_html.c\fP, \fBexample.c\fP, \fBis_valid_stdf.c\fP, \fBrecord_stats.c\fP, and \fBstdf2xtdf.c\fP.
.SS "stdf_file* stdf_dopen (int)"
.PP
Open a file descriptor with default options 
.SS "stdf_file* stdf_dopen_ex (int, uint32_t,  ...)"
.PP
Open a file descriptor with custom options 
.SS "void stdf_free_record (\fBstdf_rec_unknown\fP *)"
.PP
Free a record 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, \fBdump_records_to_html.c\fP, \fBexample.c\fP, \fBis_valid_stdf.c\fP, \fBrecord_stats.c\fP, and \fBstdf2xtdf.c\fP.
.SS "char* stdf_get_rec_name (stdf_rec_typ, stdf_rec_sub)"
.PP
Translate a record into the 3 letter spec name 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, \fBis_valid_stdf.c\fP, \fBrecord_stats.c\fP, and \fBstdf2xtdf.c\fP.
.SS "char* stdf_get_Vn_name (int) const"
.PP
Translate a Vn type into the 2 letter spec name 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, and \fBstdf2xtdf.c\fP.
.SS "void stdf_get_Vn_name_r (int, char *) const"
.PP
Translate a Vn type into the 2 letter spec name (reentrant version) 
.SS "stdf_file* stdf_open (char *)"
.PP
Open a file with default options 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, \fBdump_records_to_html.c\fP, \fBexample.c\fP, \fBis_valid_stdf.c\fP, \fBrecord_stats.c\fP, and \fBstdf2xtdf.c\fP.
.SS "stdf_file* stdf_open_ex (char *, uint32_t,  ...)"
.PP
Open a file with custom options 
.SS "\fBstdf_rec_unknown\fP* stdf_parse_raw_record (\fBstdf_rec_unknown\fP *)"
.PP
Parse a previously read record 
.SS "\fBstdf_rec_unknown\fP* stdf_read_record (stdf_file *)"
.PP
Read in the next record and parse it 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_ascii.c\fP, \fBexample.c\fP, \fBis_valid_stdf.c\fP, \fBrecord_stats.c\fP, and \fBstdf2xtdf.c\fP.
.SS "\fBstdf_rec_unknown\fP* stdf_read_record_raw (stdf_file *)"
.PP
Read in the next record raw 
.PP
\fBExamples: \fP
.in +1c
\fBdump_records_to_html.c\fP.
.SS "int stdf_rec_name_to_idx (char *) const"
.PP
Normalize the record names into array indexes 
.SS "int stdf_rec_to_idx (void *) const"
.PP
Normalize the record namespace into array indexes 
.SS "int stdf_rec_to_idx_count (void) const"
.PP
Highest array reference the normalize will return 
.SS "ssize_t stdf_write_record (stdf_file *, void *)"
.PP
Write out a record 
.SS "ssize_t stdf_write_record_raw (stdf_file *, \fBstdf_rec_unknown\fP *)"
.PP
Write out a raw record 
.SH "Author"
.PP 
Generated automatically by Doxygen for libstdf from the source code.
